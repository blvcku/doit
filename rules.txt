//Storage

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
		match /users/{uid}/{profileImage}{
    	allow write: if request.auth.uid == uid && request.resource.contentType.matches('image/.*');
      allow read: if true;
    }
    match /users/default/{profileImage}{
    	allow read;
    }
    match /projects/{id}/{image}{
      allow read: if true;
    }
  }
}



//Firestore

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  function getMembers(project){
      	return get(/databases/$(database)/documents/projects/$(project)).data.members;
      }
  function getOwner(project){
  	return get(/databases/$(database)/documents/projects/$(project)).data.authorID;
  }
    match /projects/{project} {
      allow read: if request.auth.uid in resource.data.members;
      allow update: if request.auth.uid == resource.data.authorID;
      allow create: if request.auth != null && request.resource.data.createdAt == request.time;
      allow delete: if request.auth.uid == resource.data.authorID;
    }
    match /tasks/{task}{
    	allow read: if request.auth.uid in getMembers(resource.data.projectID);
      allow update: if request.auth.uid == getOwner(resource.data.projectID);
      allow create: if request.auth.uid == getOwner(request.resource.data.projectID);
      allow delete: if request.auth.uid == getOwner(resource.data.projectID);
    }
    match /users/{user}{
    	allow read;
      allow create: if request.auth.uid != null && user == request.auth.uid;
      allow update: if request.auth.uid == resource.data.uid;
    }
  }
}